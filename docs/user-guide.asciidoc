= postgres Operator User Guide
v1.5.2, {docdate}

This document is meant for users and demonstrates
the basic interface of the *pgo* command line interface.

== Create Cluster

To create a database, use the following:
....
pgo create cluster mycluster
....

A more complex example is to create a *series* of clusters such
as:
....
pgo create cluster xraydb --series=3 --labels=project=xray --policies=xrayapp,rlspolicy
....

In the example above, we provision 3 clusters that have a number appended
into their resulting cluster name, apply a user defined label to each
cluster, and also apply user defined policies to each cluster after
they are created.

You can then view that database as:
....
pgo show cluster mydatabase
....

The output will give you the current status of the database pod
and the IP address of the database service.  If you have *postgresql*
installed on your test system you can connect to the
database using the service IP address:
....
psql -h 10.105.121.12 -U postgres postgres
....

You can view *all* databases using the special keyword *all*:
....
pgo show cluster all
....

You can filter the results based on the Postgres Version:
....
pgo show cluster all --version=9.6.2
....

== Backup Cluster

You can start a backup job for a cluster as follows:
....
pgo backup mycluster
....

You can view the backup:
....
pgo show backup mycluster
....

You can view the backup along with a PVC listing:
....
pgo show backup mycluster --show-pvc=true
....

The output of the backup will list the backup snapshots
found in the backup PVC, for example:
....
backup job pods for cluster mycluster...
└── backup-mycluster-63fw1
└── mydatabase

database pod mycluster is found

├── mycluster-backups/2017-03-27-13-54-33
├── mycluster-backups/2017-03-27-13-56-49
└── mycluster-backups/2017-03-27-14-02-38
....

This output is important in that it can let you copy/paste
a backup snapshot path and use it for restoring a database or
essentially cloning a database with an existing backup archive.

For example, to restore a database from a backup archive:
....
pgo create cluster restoredb --backup-path=mycluster-backups/2017-03-27-13-56-49 --backup-pvc=crunchy-pvc --secret-from=mycluster
....

This will create a new database called *restoredb* based on the
backup found in *mycluster-backups/2017-03-27-13-56-49* and the
secrets of the *mycluster* cluster.

Selectors can be used to perform backups as well, for example:
....
pgo backup  --selector=project=xray
....

In this example, any cluster that matches the selector will cause
a backup job to be created.


== Cluster Removal

You can remove a cluster by running:
....
pgo delete cluster restoredb
....

Note, that this command will not remove the PVC associated with
this cluster.  If you want to remove the cluster's old data files,
you will need to remove it manually.

Selectors also apply to the delete command as follows:
....
pgo delete cluster  --selector=project=xray
....

This command will cause any cluster matching the selector
to be removed. 


== Cluster Replication

When you create a Cluster, you will see in the output a variety of Kubernetes objects were created including:

 * a Deployment holding the master PostgreSQL database
 * a Deployment holding the replica PostgreSQL database
 * a service for the master database
 * a service for the replica databases

Since Postgres is a single-master database by design, the master
Deployment is set to a replica count of 1, it can not scale beyond 1.

The replica Deployment is set to an initial value of 0, you will
see there are 0 replica databases running.  Those replica databases
are in read-only mode, but you can scale up the number of replicas
beyond 0 if you need higher read scaling.  To set the number of 
replicas issue the following command:
....
pgo scale mycluster --replica-count=1
....

There are 2 service connections available to the postgres cluster, one is
to the master database which allows read-write SQL processing, and
the other is to the set of read-only replica databases.  The replica
service performs round-robin load balancing to the replica databases.

You can connect to the master database and verify that it is replicating
to the replica databases as follows:
....
psql -h 10.107.180.159 -U postgres postgres -c 'table pg_stat_replication'
....

You can view *all* clusters using the special keyword *all*:
....
pgo show cluster all
....

You can filter the results by Postgres version:
....
pgo show cluster all --version=9.6.2
....


== Minor Cluster Upgrade

You can perform a minor Postgres version upgrade
of either a database or cluster as follows:
....
pgo upgrade mycluster
....

When you run this command, it will cause the operator
to delete the existing containers of the database or cluster
and recreate them using the currently defined Postgres
container image specified in your pgo configuration file.

The database data files remain untouched, only the container
is updated, this will upgrade your Postgres server version only.

== Major Cluster Upgrade

You can perform a major Postgres version upgrade
of either a database or cluster as follows:
....
pgo upgrade mycluster --upgrade-type=major
....

When you run this command, it will cause the operator
to delete the existing containers of the database or cluster
and recreate them using the currently defined Postgres
container image specified in your pgo configuration file.

The database data files are converted to the new major Postgres
version as specified by the current Postgres image version
in your pgo configuration file.  Currently only a Postgres
9.5 to 9.6 upgrade is supported.

In this scenario, the upgrade is performed by the Postgres
pg_upgrade utility which is containerized in the *crunchydata/crunchy-upgrade*
container.  The operator will create a Job which runs the upgrade container,
using the existing Postgres database files as input, and output
the updated database files to a new PVC.

Once the upgrade job is completed, the operator will create the
original database or cluster container mounted with the new PVC
which contains the upgraded database files.

As the upgrade is processed, the status of the *pgupgrade* TPR is
updated to give the user some insight into how the upgrade is
proceeding.  Upgrades like this can take a long time if your
database is large.  The operator creates a watch on the upgrade
job to know when and how to proceed.

== Viewing PVC Information

You can view the files on a PVC as follows:
....
pgo show pvc crunchy-pvc
....

In this example, the PVC is *crunchy-pvc*.  This command is useful
in some cases to examine what files are on a given PVC.

In the case where you want to list a specific path on a PVC
you can specify the path option as follows:
....
pgo show pvc crunchy-pvc --pvc-root=mycluster-backups
....

== Viewing Passwords

You can view the passwords used by the cluster as follows:
....
pgo show cluster mycluster --show-secrets=true
....

Passwords are generated if not specified in your *pgo* configuration.

== Overriding CCP_IMAGE_TAG

New clusters typically pick up the container image version to use
based on the *pgo* configuration file's CCP_IMAGE_TAG setting.  You
can override this value using the *--ccp-image-tag* command line
flag:
....
pgo create cluster mycluster --ccp-image-tag=centos7-9.6-1.4.1
....

Likewise, you can upgrade the cluster using a command line flag:
....
pgo upgrade mycluster --ccp-image-tag=centos7-9.6-1.4.1
pgo upgrade mycluster --upgrade-type=major --ccp-image-tag=centos7-9.6-1.4.1
....

== Testing Database Connections

You can test the database connections to a cluster:
....
pgo test mycluster
....

This command will test each service defined for the cluster using
the postgres, master, and normal user accounts defined for the
cluster.  The cluster credentials are accessed and used to test
the database connections.  The equivalent *psql* command is printed
out as connections are tried, along with the connection status.

== Clone Cluster

To create a cluster clone from an existing cluster, use the following:
....
pgo clone mycluster --name=myclone
....

When you execute the *clone*, it will orchestrate the following
actions:

 * create a PgClone TPR to start the cloning workflow
 * create a replica on *mycluster* that will become the clone master
 * watch for cloned replicas to complete their replication
 * copy the original cluster's secrets for the clone to use
 * create a PgCluster TPR for the new clone cluster
 * create the Postgres trigger file on the clone to cause it to recover
   and become a valid read-write master
 * remove the PgClone TPR

NOTE:  if you are cloning a cluster that has replica(s) which 
specify a /pgdata volume using emptyDir volume type, then the cloned
master will inherit that same emptydir volume for the new cloned
master.  If this is not the behavior you want, you will need to specify
a volume type for the replica(s) that is based on either shared
volume types or dynamic volumes.

== Create and View Policy

To create a policy use the following syntax:
....
pgo create policy policy1 --in-file=/tmp/policy1.sql
pgo create policy policy1 --url=https://someurl/policy1.sql
....

When you execute this command, it will create a policy named *policy1*
using the input file */tmp/policy1.sql* as input.  It will create
on the server a PgPolicy TPR with the name *policy1* that you can 
examine as follows:

....
kubectl get pgpolicies policy1 -o json
....

Policies get automatically applied to any cluster you create if 
you define in your *.pgo.yaml* configuration a CLUSTER.POLICIES
value.  Policy SQL is executed as the *postgres* user.  

To view policies:
....
pgo show policy all
....


== Apply Policy

To apply an existing policy to a set of clusters, issue
a command like this:
....
pgo apply policy1 --selector=name=mycluster
....

When you execute this command, it will look up clusters that
have a label value of *name=mycluster* and then it will apply
the *policy1* label to that cluster and execute the policy
SQL against that cluster using the *postgres* user account.

WARNING:  policies are executed as the superuser in PostgreSQL therefore
take caution when using them.

== User Management - Add a User

To create a new Postgres user to the *mycluster* cluster, execute:
....
pgo user --add-user=sally --selector=name=mycluster
....

To add that user to a all clusters:
....
pgo user --add-user=sally 
....

== User Management - Delete a User

To delete a Postgres user in the *mycluster* cluster, execute:
....
pgo user --delete-user=sally --selector=name=mycluster
....

To delete that user in all clusters:
....
pgo user --delete-user=sally 
....

== User Management - Change Password

To change the password for a user in the *mycluster* cluster:
....
pgo user --change-password=sally --selector=name=mycluster
....

To change the password for the *sally* user in all clusters:
....
pgo user --change-password=sally 
....

The password is generated and printed in cleartext on your screen.

== User Management - Show Expired Passwords

To see user passwords that have expired past a certain number
of days in the *mycluster* cluster:
....
pgo user --expired=7 --selector=name=mycluster
....

The same command across all clusters:
....
pgo user --expired=7 
....

== User Management - Update Expired Passwords

To assign users to a cluster:
....
pgo user --add-user=user1 --valid-days=30 --managed --db=userdb --selector=name=xraydb1
....

In this example, a user named *user1* is created with a *valid until* password date set to expire in 30 days.  That user will be granted access to the *userdb* database.  This user account also will have an associated *secret* created to hold the password that was generated for this user.  Any clusters that match the selector value will have this user created on it.

To change a user password:
....
pgo user --change-password=user1 --valid-days=10 --selector=name=xray1
....

In this example, a user named *user1* has its password changed to a generated
value and the *valid until* expiration date set to 10 days from now, this
command will take effect across all clusters that match the selector.

To drop a user:
....
pgo user --delete-user=user3   --selector=project=xray
....

To see which passwords are set to expire in a given number of days:
....
pgo user --expired=10  --selector=project=xray
....

To check password age:
....
pgo user --expired=10  --selector=project=xray
....

In this example, any clusters that match the selector are queried to see
if any users are set to expire in 10 days.

To update expired passwords in a cluster:
....
pgo user --update-passwords --selector=name=mycluster
....

The same command across all clusters:
....
pgo user --update-passwords
....

== Label Management

You can apply a user defined label to a cluster as follows:
....
pgo label --label=env=research  --selector=project=xray
....

In this example, we apply a label of *env=research* to any
clusters that have an existing label of *project=xray* applied.


== bash Completion

There is a bash completion file that is included for users to try, this
is located in the repo at *example/pgo-bash-completion*.  To use it, copy
that file to /etc/bash_completion.d/pgo, and log out and back into your
bash shell to try it out.   

== Label Selectors on Cluster Listing

You can create and assign a label to a *pgcluster* TPR object
as follows:
....
kubectl label pgclusters mycluster name=thebest
kubectl get pgclusters --show-lables
....

This allows the user to define any user metadata they desire
for any set of *pgcluster* objects.  You can then select a
subset of *pgcluster* objects using a command like this:
....
pgo show cluster all --selector=name=thebest
....

This gives user another way to query the clusters using their
own metadata labeling scheme applied to *pgcluster* objects.
