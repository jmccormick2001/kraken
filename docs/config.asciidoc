= PostgreSQL Operator Configuration
v1.5.2, {docdate}


This document describes the configuration options
for the *PostgreSQL operator*.

== pgo Client Configuration

Sample pgo configuration files are located in the $COROOT/examples directory.

You will need to copy a sample to your $HOME/.pgo.yaml location.  It
can be defined in the following locations:

 * . (current directory)
 * $HOME
 * /etc/pgo/

The .pgo.yaml file location is checked in that order.

=== pgo Configuration Format

The sample pgo client configuration file, included in
*examples/pgo.yaml.emptydir*, looks like this:

[source,yaml]
....
KUBECONFIG:  /etc/kubernetes/admin.conf
CLUSTER:
  CCP_IMAGE_TAG:  centos7-9.6-1.4.1
  PORT:  5432
  PG_MASTER_USER:  master
  PG_MASTER_PASSWORD:  password
  PG_USER:  testuser
  PG_PASSWORD:  password
  PG_DATABASE:  userdb
  PG_ROOT_PASSWORD:  password
  STRATEGY:  1
  REPLICAS:  0
  POLICIES:  policy1,policy2
  PASSWORD_AGE_DAYS:  60
  PASSWORD_LENGTH:  8
MASTER_STORAGE:
  PVC_NAME:  crunchy-pvc
  STORAGE_CLASS:  standard
  PVC_ACCESS_MODE:  ReadWriteMany
  PVC_SIZE:  100M
  STORAGE_TYPE:  emptydir
  FSGROUP:  26
  SUPPLEMENTALGROUPS:  65534
REPLICA_STORAGE:
  PVC_NAME:  crunchy-pvc
  STORAGE_CLASS:  standard
  PVC_ACCESS_MODE:  ReadWriteMany
  PVC_SIZE:  100M
  STORAGE_TYPE:  emptydir
  FSGROUP:  26
  SUPPLEMENTALGROUPS:  65534
BACKUP_STORAGE:
  PVC_NAME:  crunchy-pvc
  STORAGE_CLASS:  standard
  PVC_ACCESS_MODE:  ReadWriteMany
  PVC_SIZE:  100M
  STORAGE_TYPE:  shared
  FSGROUP:  26
  SUPPLEMENTALGROUPS:  65534
PGO:
  LSPVC_TEMPLATE:  /home/youruserid/.pgo.lspvc-template.json
  CSVLOAD_TEMPLATE:  /home/youruserid/.pgo.csvload-template.json
  CO_IMAGE_TAG:  centos7-1.5.2
  DEBUG:  false
....

Values in the pgo configuration file have the following meaning:

.pgo Configuration File Definitions
[width="90%",cols="m,2",frame="topbot",options="header"]
|======================
|Setting | Definition
|KUBECONFIG        | the path to the kubeconfig file
|CLUSTER.CCP_IMAGE_TAG        |newly created containers will be based on this image version (e.g. centos7-9.6-1.4.1), unless you override it using the --ccp-image-tag command line flag
|CLUSTER.PORT        | the PostgreSQL port to use for new containers (e.g. 5432)
|CLUSTER.PG_MASTER_USER        | the PostgreSQL master user name
|CLUSTER.PG_MASTER_PASSWORD        | the PostgreSQL master user password, when specified, it will be stored in the secret holding the master user credentials, if not specified the value will be generated
|CLUSTER.PG_USER        | the PostgreSQL normal user name
|CLUSTER.PG_PASSWORD        | the PostgreSQL normal user password, when specified, it will be stored in the secret holding the normal user credentials, if not specified the value will be generated
|CLUSTER.PG_ROOT_PASSWORD        | the PostgreSQL *postgres* user password, when specified, it will be stored in the secret holding the root user credentials, if not specified the value will be generated
|CLUSTER.STRATEGY        | sets the deployment strategy to be used for deploying a cluster, currently there is only strategy *1*
|CLUSTER.REPLICAS        | the number of cluster replicas to create for newly created clusters
|CLUSTER.POLICIES        | optional, list of policies to apply to a newly created cluster, comma separated, must be valid policies in the catalog
|CLUSTER.PASSWORD_AGE_DAYS        | optional, if set, will set the VALID UNTIL date on passwords to this many days in the future when creating users or setting passwords, defaults to 365 days
|CLUSTER.PASSWORD_LENGTH        | optional, if set, will determine the password length used when creating passwords, defaults to 8
|MASTER_STORAGE.PVC_NAME        |for the master PostgreSQL deployment, if set, the PVC to use for created databases, used when the storage type is *existing*
|MASTER_STORAGE.STORAGE_CLASS        |for the master PostgreSQL deployment, for a dynamic storage type, you can specify the storage class used for storage provisioning(e.g. standard, gold, fast)
|MASTER_STORAGE.PVC_ACCESS_MODE        |for the master PostgreSQL deployment, the access mode for new PVCs (e.g. ReadWriteMany, ReadWriteOnce, ReadOnlyMany). See below for descriptions of these.
|MASTER_STORAGE.PVC_SIZE        |for the master PostgreSQL deployment, the size to use when creating new PVCs (e.g. 100M, 1Gi)
|MASTER_STORAGE.STORAGE_TYPE        |for the master PostgreSQL deployment, supported values are either *dynamic*, *existing*, *create*, or *emptydir*, if not supplied, *emptydir* is used
|MASTER_STORAGE.FSGROUP        | optional, if set, will cause a *SecurityContext* and *fsGroup* attributes to be added to generated Pod and Deployment definitions
|MASTER_STORAGE.SUPPLEMENTAL_GROUPS        | optional, if set, will cause a SecurityContext to be added to generated Pod and Deployment definitions
|REPLICA_STORAGE.PVC_NAME        |for the replica PostgreSQL deployments, if set, the PVC to use for created databases, used when the storage type is *existing*
|REPLICA_STORAGE.STORAGE_CLASS        |for the replica PostgreSQL deployment, for a dynamic storage type, you can specify the storage class used for storage provisioning(e.g. standard, gold, fast)
|REPLICA_STORAGE.PVC_ACCESS_MODE        |for the replica PostgreSQL deployment, the access mode for new PVCs (e.g. ReadWriteMany, ReadWriteOnce, ReadOnlyMany). See below for descriptions of these.
|REPLICA_STORAGE.PVC_SIZE        |for the replica PostgreSQL deployment, the size to use when creating new PVCs (e.g. 100M, 1Gi)
|REPLICA_STORAGE.STORAGE_TYPE        |for the replica PostgreSQL deployment, supported values are either *dynamic*, *existing*, *create*, or *emptydir*, if not supplied, *emptydir* is used
|REPLICA_STORAGE.FSGROUP        | optional, if set, will cause a *SecurityContext* and *fsGroup* attributes to be added to generated Pod and Deployment definitions
|REPLICA_STORAGE.SUPPLEMENTAL_GROUPS        | optional, if set, will cause a SecurityContext to be added to generated Pod and Deployment definitions
|BACKUP_STORAGE.PVC_NAME        |for the backup job, if set, the PVC to use for holding backup files, used when the storage type is *existing*
|BACKUP_STORAGE.STORAGE_CLASS        |for the backup job, for a dynamic storage type, you can specify the storage class used for storage provisioning(e.g. standard, gold, fast)
|BACKUP_STORAGE.PVC_ACCESS_MODE        |for the backup job, the access mode for new PVCs (e.g. ReadWriteMany, ReadWriteOnce, ReadOnlyMany). See below for descriptions of these.
|BACKUP_STORAGE.PVC_SIZE        |for the backup job, the size to use when creating new PVCs (e.g. 100M, 1Gi)
|BACKUP_STORAGE.STORAGE_TYPE        |for the backup job , supported values are either *dynamic*, *existing*, *create*, or *emptydir*, if not supplied, *emptydir* is used
|BACKUP_STORAGE.FSGROUP        | optional, if set, will cause a *SecurityContext* and *fsGroup* attributes to be added to generated Pod and Deployment definitions
|BACKUP_STORAGE.SUPPLEMENTAL_GROUPS        | optional, if set, will cause a SecurityContext to be added to generated Pod and Deployment definitions
|PGO.LSPVC_TEMPLATE        | the PVC lspvc template file that lists PVC contents
|PGO.CSVLOAD_TEMPLATE        | the CSV load template file used for load jobs
|PGO.CO_IMAGE_TAG        | image tag to use for the PostgreSQL operator containers
|PGO.DEBUG        | set to true if you want to see debug messages from the pgo client
|======================

*NOTE*: Regarding the PVC access mode variable; this is automatically set to ReadWriteMany but
you also have the option to set this to ReadWriteOnce or ReadOnlyMany. The definitions of these
are as follows:

* *ReadWriteMany* - mounts the volume as read-write by many nodes
* *ReadWriteOnce* - mounts the PVC as read-write by a single node
* *ReadOnlyMany* - mounts the PVC as read-only by many nodes

== Operator Configuration (Server)

The operator is run as a Kubernetes Deployment on the Kubernetes cluster
within a namespace.

The script *example/operator/deploy.sh* will create the operator
deployment on your Kubernetes cluster.

You can also create NFS PV(s) using the create-pv-nfs.sh script.

To enable DEBUG messages from the operator pod, set the *DEBUG* environment
variable to *true* within its deployment file *deployment.json*.

=== Docker Connection

The operator looks up Docker image information such as labels to use
when creating databases and clusters.  For this to work, the
Pod needs to access the Docker socket. The socket is mounted as a
hostPath volume within the operator pod.  You will need to ensure
that the host Docker socket's permissions are adjusted to allow
the operator to connect to the Docker socket. On CentOS 7, the
standard Docker socket permissions are:
....
srw-rw----. 1 root docker 0 May 17 07:30 /var/run/docker.sock
....

Since the operator runs as the *root* user, it can access the Docker
socket.

=== Operator Templates

The database and cluster Kubernetes objects that get created by the operator
are based on json templates that are added into the operator deployment
by means of a mounted volume.

The templates are located in the *$COROOT/conf/postgres-operator* directory
and get added into a config map which is mounted by the operator deployment.

For your persistent file system, you might need to adjust the templates
to add *fsGroup* or *supplementalGroup* attributes to your *pgo* configuration
file.

=== Persistence

Different ways of handling storage are specified by a user in
the *.pgo.yaml* configuration file by specifying values within
the REPLICA_STORAGE, MASTER_STORAGE, and BACKUP_STORAGE settings.

The following STORAGE_TYPE values are possible:

 * *dynamic* - Currently not implemented, this will allow for dynamic
 provisioning of storage using a StorageClass.
 * *existing* - This setting allows you to use a PVC that already exists.
 For example, if you have a NFS volume mounted to a PVC, all PostgreSQL clusters
 can write to that NFS volume mount via a common PVC. When set, the PVC_NAME
 setting is used for the PVC.
 * *create* - This setting allows for the creation of a new PVC for
 each PostgreSQL cluster using a naming convention of *clustername*-pvc*.
 When set, the *PVC_SIZE*, *PVC_ACCESS_MODE* settings are used in
 constructing the new PVC.
 * *emptydir* - If a STORAGE_TYPE value is not defined, *emptydir* is used by default.
 This is a volume type that’s created when a pod is assigned to a node and exists as
 long as that pod remains running on that node; it is deleted as soon as the pod is
 manually deleted or removed from the node.

The operator will create new PVCs using this naming convention:
*dbname-pvc* where *dbname* is the database name you have specified.  For
example, if you run:
....
pgo create cluster example1
....

It will result in a PVC being created named *example1-pvc* and in
the case of a backup job, the pvc is named *example1-backup-pvc*

There are currently 3 sample pgo configuration files provided
for users to use as a starting configuration:

 * pgo.yaml.emptydir - this configuration specifies *emptydir* storage
 to be used for databases
 * pgo.yaml.nfs - this configuration specifies *create* storage to
 be used, this is used for NFS storage for example where you want to
 have a unique PVC created for each database
 * pgo.yaml.dynamic - this configuration specifies *dynamic* storage
 to be used, namely a *storageclass* that refers to a dynamic provisioning
 strorage such as StorageOS or Portworx, or GCE.
